{"version":3,"sources":["api/Tmdb.js","components/MovieRow/index.js","components/FeaturedMovie/index.js","components/Header/index.js","App.js","index.js"],"names":["API_KEY","basicFetch","endpoint","a","fetch","req","json","getHomeList","slug","title","items","getMovieInfo","movieId","type","info","useState","scrollX","setScrollX","className","onClick","x","Math","round","window","innerWidth","style","fontSize","listW","results","length","marginLeft","width","map","item","key","src","poster_path","alt","original_title","firstDate","Date","first_air_date","genres","i","push","name","description","overview","substring","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","original_name","vote_average","getFullYear","number_of_seasons","href","id","class","join","black","movieList","setMovieList","featureData","setFeatureData","blackHeader","setBlackHeader","useEffect","Tmdb","list","originals","filter","randomChosen","floor","random","chosen","chosenInfo","loadAll","scrollListener","scrollY","addEventListener","removeEventListener","Header","FeaturedMovie","MovieRow","target","color","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.59ee51f9.chunk.js","sourcesContent":["const API_KEY = 'b240ce051d45edd8ec13c4cda1088780';\r\nconst API_BASE = 'https://api.themoviedb.org/3';\r\n\r\nconst basicFetch = async (endpoint) => {\r\n    const req = await fetch(`${API_BASE}${endpoint}`);\r\n    const json = await req.json();\r\n    return json\r\n}\r\n\r\nexport default {\r\n    getHomeList: async () => {\r\n        return [\r\n            {\r\n                slug: 'originals',\r\n                title: 'Originais do Netflix',\r\n                items: await basicFetch(`/discover/tv?with_network=213&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n\r\n            {\r\n                slug: 'trending',\r\n                title: 'Recomendados pra Você',\r\n                items: await basicFetch(`/trending/all/week?language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            \r\n            {\r\n                slug: 'toprated',\r\n                title: 'Em Alta',\r\n                items: await basicFetch(`/movie/top_rated?language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n\r\n            {\r\n                slug: 'action',\r\n                title: 'Ação',\r\n                items: await basicFetch(`/discover/movie?with_genres=28&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n\r\n            {\r\n                slug: 'comedy',\r\n                title: 'Comédia',\r\n                items: await basicFetch(`/discover/movie?with_genres=35&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n\r\n            {\r\n                slug: 'horror',\r\n                title: 'Terror',\r\n                items: await basicFetch(`/discover/movie?with_genres=27&language=pt-BR&api_key=${API_KEY}`)               \r\n            },\r\n\r\n            {\r\n                slug: 'romance',\r\n                title: 'Romance',\r\n                items: await basicFetch(`/discover/movie?with_genres=10749&language=pt-BR&api_key=${API_KEY}`)               \r\n            },\r\n\r\n            {\r\n                slug: 'documentary',\r\n                title: 'Documentários',\r\n                items: await basicFetch(`/discover/movie?with_genres=99&language=pt-BR&api_key=${API_KEY}`)   \r\n            },\r\n\r\n            {\r\n                slug: 'animation',\r\n                title: 'Animação',\r\n                items: await basicFetch(`/discover/movie?with_genres=16&language=pt-BR&api_key=${API_KEY}`) \r\n            },\r\n\r\n            {\r\n                slug: 'scifi & fantasy',\r\n                title: 'Ficção Científica',\r\n                items: await basicFetch(`/discover/movie?with_genres=878&language=pt-BR&api_key=${API_KEY}`)               \r\n            },\r\n\r\n            {\r\n                slug: 'war',\r\n                title: 'Guerra',\r\n                items: await basicFetch(`/discover/movie?with_genres=10752&language=pt-BR&api_key=${API_KEY}`)               \r\n            },\r\n\r\n            {\r\n                slug: 'adventure',\r\n                title: 'Aventura',\r\n                items: await basicFetch(`/discover/movie?with_genres=12&language=pt-BR&api_key=${API_KEY}`)               \r\n            },\r\n        ];\r\n    },\r\n\r\n    getMovieInfo: async (movieId, type) => {\r\n        let info = {};\r\n\r\n        if (movieId) {\r\n            switch(type) {\r\n                case 'movie':\r\n                    info = await basicFetch(`/movie/${movieId}?language=pt-BR&api_key=${API_KEY}`);\r\n                break;\r\n                case 'tv':\r\n                    info = await basicFetch(`/tv/${movieId}?language=pt-BR&api_key=${API_KEY}`);\r\n                break;\r\n                default: \r\n                    info = null;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return info;\r\n    }\r\n}","import React, { useState } from \"react\";\r\nimport \"../MovieRow/style.css\";\r\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\n\r\nexport default ({ title, items }) => {\r\n  const [scrollX, setScrollX] = useState(0);\r\n\r\n  const handleLeftArrow = () => {\r\n    let x = scrollX + Math.round(window.innerWidth / 2);\r\n    if (x > 0) {\r\n      x = 0;\r\n    }\r\n    setScrollX(x);\r\n  }\r\n\r\n  const handleRightArrow = () => {\r\n    let x = scrollX - Math.round(window.innerWidth / 2);\r\n    let listW = items.results.length * 150;\r\n    if ((window.innerWidth - listW) > x) {\r\n      x = (window.innerWidth - listW) - 60;\r\n    }\r\n    setScrollX(x);\r\n  }\r\n\r\n  return (\r\n    <div className=\"movieRow\">\r\n      <h2>{title}</h2>\r\n      <div className=\"movieRow--left\" onClick={handleLeftArrow}>\r\n        <NavigateBeforeIcon style={{fontSize: 50}} />\r\n      </div>\r\n      <div className=\"movieRow--right\" onClick={handleRightArrow}>\r\n        <NavigateNextIcon style={{fontSize: 50}} />\r\n      </div>\r\n      <div className=\"movieRow--listarea\">\r\n        <div className=\"movieRow--list\" style={{\r\n          marginLeft: scrollX,\r\n          width: items.results.length * 150\r\n        }}>\r\n            {items.results.length > 0 && items.results.map((item, key) => (\r\n                <div key={key} className=\"movieRow--item\">\r\n                    <img src={`https://image.tmdb.org/t/p/w300${item.poster_path}`} alt={item.original_title} />\r\n                </div>\r\n            ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"../FeaturedMovie/style.css\";\r\n\r\nexport default ({ item }) => {\r\n\r\n    let firstDate = new Date(item.first_air_date);\r\n    let genres = [];\r\n    for(let i in item.genres) {\r\n        genres.push(item.genres[i].name);\r\n    }\r\n    \r\n    let description = item.overview;\r\n    if (description.length > 300) {\r\n        description = `${description.substring(0,300)} ...`;\r\n    }\r\n\r\n  return (\r\n    <section\r\n      className=\"featured\"\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundPosition: \"center\",\r\n        backgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})`,\r\n      }}\r\n    >\r\n      <div className=\"featured--vertical\">\r\n        <div className=\"featured--horizontal\">\r\n            <div className=\"featured--name\">{item.original_name}</div>\r\n            <div className=\"featured--info\">\r\n                <div className=\"featured--points\">{item.vote_average}</div>\r\n                <div className=\"featured--year\">{firstDate.getFullYear()}</div>\r\n                <div className=\"featured--seasons\">{item.number_of_seasons} Temporada{item.number_of_seasons !== 1 ? 's' : ''}</div>\r\n            </div>\r\n            <div className=\"featured--description\">{description}</div>\r\n            <div className=\"featured--buttons\">\r\n                <a href={`/watch/${item.id}`} className=\"featured--watchbutton\"><span><i class=\"fas fa-play\"></i></span>Assistir</a>\r\n                <a href={`/list/add/${item.id}`} className=\"featured--mylistbutton\"><span><i class=\"fas fa-plus\"></i></span> Minha Lista</a>\r\n            </div>\r\n            <div className=\"featured--genres\"><strong>Gêneros: </strong><span>{genres.join(', ')}</span></div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport '../Header/style.css';\r\n\r\nexport default ({black}) => {\r\n    return (\r\n        <header className={black ? \"black\" : \"\"}>\r\n            <div className=\"header--logo\">\r\n                <a href=\"/\">\r\n                    <img src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\" alt=\"Netflix\" />\r\n                </a>\r\n            </div>\r\n            <div className=\"header--user\">\r\n                <a href=\"/\">\r\n                    <img src=\"https://mir-s3-cdn-cf.behance.net/project_modules/disp/366be133850498.56ba69ac36858.png\" alt=\"Usuário\" />\r\n                </a>\r\n            </div>\r\n        </header>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Tmdb from './api/Tmdb';\nimport MovieRow from './components/MovieRow/index';\nimport FeaturedMovie from './components/FeaturedMovie/index';\nimport Header from './components/Header/index';\n\nexport default () => {\n\n  const [movieList, setMovieList] = useState([]);\n  const [featureData, setFeatureData] = useState(null);\n  const [blackHeader, setBlackHeader] = useState(false);\n\n  useEffect(() => {\n    const loadAll = async () => {\n      let list = await Tmdb.getHomeList();\n      setMovieList(list);\n\n      let originals = list.filter(i=> i.slug === 'originals');\n      let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1));\n      let chosen = originals[0].items.results[randomChosen];\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'tv');\n\n      setFeatureData(chosenInfo);\n    }\n\n\n    loadAll();\n  }, []);\n\n  useEffect(() => {\n    const scrollListener = () => {\n      if (window.scrollY > 10) {\n        setBlackHeader(true);\n      } else {\n        setBlackHeader(false);\n      }\n    }\n\n    window.addEventListener('scroll', scrollListener);\n\n    return () => {\n      window.removeEventListener('scroll', scrollListener);\n    }\n  },2000, []);\n\n  return (\n    <div className=\"page\">\n      <Header black={blackHeader} />\n      {featureData && \n        <FeaturedMovie item={featureData} />\n      }\n      <section className=\"lists\">\n        {movieList.map((item, key) =>(\n          <div>\n            <MovieRow key={key} title={item.title} items={item.items} />\n            \n          </div>\n        ))}\n      </section>\n      <footer>\n        Direitos de imagem para <a href=\"https://www.netflix.com/br/\" target=\"blank\" style={{color: \"#e50914\"}}>Netflix</a> <br/>\n        Dados pegos do site <a href=\"https://www.themoviedb.org\" target=\"blank\" style={{color: \"#115c99\"}}>Themoviedb.org</a>\n      </footer>\n      {movieList.length <= 0 &&\n        <div className=\"loading\">\n          <img src=\"https://www.filmelier.com/pt/br/news/wp-content/uploads/2020/03/Netflix_LoadTime-scaled.gif\" alt=\"Carregando\"></img>\n        </div>\n      }\n    </div>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}